-- CREATING TABLES
CREATE TABLE EMPLOYEE 
( EMPLOYEE_ID INTEGER PRIMARY KEY, 
EMP_FIRSTNAME VARCHAR(100),
EMP_LASTNAME VARCHAR(100), 
DEPARTMENT_ID INTEGER, 
SALARY NUMBER, 
EMP_EMAIL VARCHAR(100)

);
/

CREATE TABLE DEPARTMENT
(
DEPARTMENT_ID INTEGER PRIMARY KEY,
DEPARTMENT_NAME VARCHAR(100)

);
/

--Create a sequence and trigger to auto-generate primary key values for both tables. 
ALTER TABLE EMPLOYEE
ADD CONSTRAINT FK_EMPLOYEE
FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID);
/

CREATE SEQUENCE SQ_EMPLOYEE_PK
START WITH 1000
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE
BEFORE INSERT ON EMPLOYEE --SPECIFY OPERATION, BEFORE/AFTER, AND TABLE 
FOR EACH ROW
BEGIN
    SELECT SQ_EMPLOYEE_PK.NEXTVAL INTO :NEW.EMPLOYEE_ID FROM DUAL;
END;
/

CREATE SEQUENCE SQ_DEPARTMENT_PK
START WITH 1000
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER TR_INSERT_DEPARTMENT
BEFORE INSERT ON DEPARTMENT --SPECIFY OPERATION, BEFORE/AFTER, AND TABLE 
FOR EACH ROW
BEGIN
    SELECT SQ_DEPARTMENT_PK.NEXTVAL INTO :NEW.DEPARTMENT_ID FROM DUAL;
END;
/

--Insert at least six employees and three departments. 
INSERT ALL
  INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('IT')
  INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('HR')
  INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('RD')
  
SELECT * FROM DUAL;
/

INSERT ALL 
  INTO EMPLOYEE (EMPLOYEE_ID, EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) VALUES (1, 'Khanh', 'Dang', 1, 60000, 'kdang@gmail.com')
  INTO EMPLOYEE (EMPLOYEE_ID, EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) VALUES (2, 'Jojo', 'Kujo', 2, 10000, 'jojo@gmail.com')
  INTO EMPLOYEE (EMPLOYEE_ID, EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) VALUES (3, 'Dio', 'Brando', 3, 20000, 'dio@gmail.com')
  INTO EMPLOYEE (EMPLOYEE_ID, EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) VALUES (4, 'Johnathan', 'Joestar', 3, 80000, 'joestar@gmail.com')
  INTO EMPLOYEE (EMPLOYEE_ID, EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) VALUES (5, 'Jeff', 'Polnareff', 2, 35000, 'jeffp@gmail.com')
  INTO EMPLOYEE (EMPLOYEE_ID, EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) VALUES (6, 'Mohamed', 'Abdul', 1, 70000, 'mohameda@gmail.com')

SELECT * FROM DUAL;
/

--Create a stored procedure SP_GIVE_RAISE which takes in a DEPARTMENT_ID and increases each employee's salary within the department by 10%, 
--and returns the new average salary for the department, as well as a boolean value indicating whether the ID entered corresponds to a valid department. 
CREATE OR REPLACE PROCEDURE SP_GIVE_RAISE(DEP_ID IN NUMBER, AVG_EMP OUT NUMBER, VALID_ID OUT NUMBER)
IS
DEP_EXIST NUMBER;
BEGIN
  SELECT COUNT(DEP_ID) INTO DEP_EXIST FROM DEPARTMENT WHERE DEPARTMENT_ID = DEP_ID;
  IF DEP_EXIST > 0 THEN
     UPDATE EMPLOYEE SET SALARY = (SALARY*0.1) +SALARY WHERE DEPARTMENT_ID = DEP_ID;
     SELECT AVG(SALARY) INTO AVG_EMP FROM EMPLOYEE WHERE DEPARTMENT_ID = DEP_ID;
  ELSE
    AVG_EMP := 0;
    VALID_ID := 0;
    END IF;
    COMMIT;
    
END;
/
    




   
